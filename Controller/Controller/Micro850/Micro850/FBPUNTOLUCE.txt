(****** QuickLD compiler *******************************)
(****** Copyright Rockwell Automation Canada, Ltd ******)
(****** ST *********************************************)

(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,1
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB2 := TRUE ;
IF __EDTB2 THEN
(* Operator output on : = with __EDTB1 *)
__EDTB1 := (IMODESTATE = 0) ;
ELSE
__EDTB1 := FALSE ;
END_IF ;
__MO_EQUAL_1 := __EDTB1 ;
XMODEMAN := __EDTB1 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,5
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB4 := TRUE ;
IF __EDTB4 THEN
(* Operator output on : = with __EDTB3 *)
__EDTB3 := (IMODESTATE = 1) ;
ELSE
__EDTB3 := FALSE ;
END_IF ;
__MO_EQUAL_2 := __EDTB3 ;
XMODESEMIAUT := __EDTB3 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,9
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB6 := TRUE ;
IF __EDTB6 THEN
(* Operator output on : = with __EDTB5 *)
__EDTB5 := (IMODESTATE = 2) ;
ELSE
__EDTB5 := FALSE ;
END_IF ;
__MO_EQUAL_3 := __EDTB5 ;
XMODEAUT := __EDTB5 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,13
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB7 := STHMIPLCMD.XHMIOK ;
IF __EDTB7 THEN
TEMPDINT := (STHMIPLCMD.DIAUTOTIME * 1000) ;
END_IF ;
__MO_MULT_1 := __EDTB7 ;
__EDTB8 := __EDTB7 ;
IF __EDTB8 THEN
TIAUTOTIMVALUE := ANY_TO_TIME(TEMPDINT) ;
END_IF ;
__MO_ANY_TO_TIME_1 := __EDTB8 ;
__EDTB9 := __EDTB8 ;
IF __EDTB9 THEN
TISEMIAUTOTIMVALUE := ANY_TO_TIME(STHMIPLCMD.DISEMIAUTOTIME) ;
END_IF ;
__MO_ANY_TO_TIME_2 := __EDTB9 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,17
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB10 := NOT(STHMIPLCMD.XHMIOK) ;
IF __EDTB10 THEN
TIAUTOTIMVALUE := (  T#120S) ;
END_IF ;
__MO_1GAIN_1 := __EDTB10 ;
__EDTB11 := __EDTB10 ;
IF __EDTB11 THEN
TISEMIAUTOTIMVALUE := (  T#120S) ;
END_IF ;
__MO_1GAIN_2 := __EDTB11 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,20
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB12 := XLAMPCMD ;
__EDTB13 := __EDTB12 AND XMODEMAN ;
__EDTB14 := __EDTB12 AND XMODEAUT ;
__EDTB15 := (__EDTB13 OR __EDTB14) ;
; (*Fall detection on  : I_XMANCMD with __MEMO__1__I_XMANCMD *)
__EDTB16 := __EDTB15 AND (__MEMO__1__I_XMANCMD AND NOT(I_XMANCMD)) ;
; (*Fall detection on  : STHMIPLCMD.XMANCMD with __MEMO__2__STHMIPLCMD_XMANCMD *)
__EDTB17 := __EDTB15 AND (__MEMO__2__STHMIPLCMD_XMANCMD AND NOT(STHMIPLCMD.XMANCMD)) ;
; (*Pulse detection on : STHMIPLCMD.XMANCMD with __MEMO__3__STHMIPLCMD_XMANCMD *)
__EDTB18 := __EDTB15 AND (STHMIPLCMD.XMANCMD AND NOT(__MEMO__3__STHMIPLCMD_XMANCMD)) ;
__EDTB19 := (__EDTB17 OR __EDTB18) ;
__EDTB20 := (__EDTB16 OR __EDTB19) ;
(* FB call: TON *)
tAutoTimer(__EDTB12 AND XMODEAUT AND NOT(I_XAUTCMD), TIAUTOTIMVALUE) ;
__EDTB21 := tAutoTimer.Q ;
(* FB call: TON *)
tSemiAutoTimer(__EDTB12 AND XMODESEMIAUT, TISEMIAUTOTIMVALUE) ;
__EDTB22 := tSemiAutoTimer.Q ;
__EDTB23 := (__EDTB21 OR __EDTB22) ;
XSTOPLAMP := (__EDTB20 OR __EDTB23) ;

(*************** Code for the end of Rung **************)
__MEMO__1__I_XMANCMD := I_XMANCMD ; (*Fall detection on  : I_XMANCMD with __MEMO__1__I_XMANCMD *)
__MEMO__2__STHMIPLCMD_XMANCMD := STHMIPLCMD.XMANCMD ; (*Fall detection on  : STHMIPLCMD.XMANCMD with __MEMO__2__STHMIPLCMD_XMANCMD *)
__MEMO__3__STHMIPLCMD_XMANCMD := STHMIPLCMD.XMANCMD ; (*Pulse detection on : STHMIPLCMD.XMANCMD with __MEMO__3__STHMIPLCMD_XMANCMD *)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,28
__ENDSTEPPRAGMA
(*Label :*)(**)
; (*Fall detection on  : I_XMANCMD with __MEMO__4__I_XMANCMD *)
__EDTB24 := (__MEMO__4__I_XMANCMD AND NOT(I_XMANCMD)) ;
; (*Pulse detection on : STHMIPLCMD.XMANCMD with __MEMO__5__STHMIPLCMD_XMANCMD *)
__EDTB25 := (STHMIPLCMD.XMANCMD AND NOT(__MEMO__5__STHMIPLCMD_XMANCMD)) ;
; (*Fall detection on  : STHMIPLCMD.XMANCMD with __MEMO__6__STHMIPLCMD_XMANCMD *)
__EDTB26 := (__MEMO__6__STHMIPLCMD_XMANCMD AND NOT(STHMIPLCMD.XMANCMD)) ;
__EDTB27 := (__EDTB25 OR __EDTB26) ;
__EDTB28 := (__EDTB24 OR __EDTB27) AND NOT(XLAMPCMD) ;
__EDTB29 := __EDTB28 AND XMODEMAN ;
__EDTB30 := __EDTB28 AND XMODESEMIAUT ;
__EDTB31 := __EDTB28 AND XMODEAUT ;
__EDTB32 := (__EDTB30 OR __EDTB31) ;
__EDTB33 := (__EDTB29 OR __EDTB32) ;
; (*Pulse detection on : I_XAUTCMD with __MEMO__7__I_XAUTCMD *)
__EDTB34 := (I_XAUTCMD AND NOT(__MEMO__7__I_XAUTCMD)) AND XMODEAUT ;
__EDTB35 := XLAMPCMD ;
__EDTB36 := (__EDTB34 OR __EDTB35) ;
XLAMPCMD := (__EDTB33 OR __EDTB36) AND NOT(XSTOPLAMP) AND NOT(XCONFIGMODE) ;

(*************** Code for the end of Rung **************)
__MEMO__4__I_XMANCMD := I_XMANCMD ; (*Fall detection on  : I_XMANCMD with __MEMO__4__I_XMANCMD *)
__MEMO__5__STHMIPLCMD_XMANCMD := STHMIPLCMD.XMANCMD ; (*Pulse detection on : STHMIPLCMD.XMANCMD with __MEMO__5__STHMIPLCMD_XMANCMD *)
__MEMO__6__STHMIPLCMD_XMANCMD := STHMIPLCMD.XMANCMD ; (*Fall detection on  : STHMIPLCMD.XMANCMD with __MEMO__6__STHMIPLCMD_XMANCMD *)
__MEMO__7__I_XAUTCMD := I_XAUTCMD ; (*Pulse detection on : I_XAUTCMD with __MEMO__7__I_XAUTCMD *)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,34
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB37 := NOT(STHMIPLCMD.XHMIOK) AND NOT(I_XMANCMD) AND I_XMANCMD ;
(* FB call: TON *)
tSemiAutoSelTimer(__EDTB37 AND XMODEMAN, T#5S) ;
__EDTB38 := tSemiAutoSelTimer.Q ;
IF __EDTB38 THEN
IMODESTATE := (  1) ;
END_IF ;
__MO_1GAIN_3 := __EDTB38 ;
__EDTB39 := __EDTB38 ;
(* FB call: TON *)
tAutoSelTimer(__EDTB37 AND XMODESEMIAUT, T#5S) ;
__EDTB40 := tAutoSelTimer.Q ;
IF __EDTB40 THEN
IMODESTATE := (  2) ;
END_IF ;
__MO_1GAIN_4 := __EDTB40 ;
__EDTB41 := __EDTB40 ;
(* FB call: TON *)
tManSelTimer(__EDTB37 AND XMODEAUT, T#5S) ;
__EDTB42 := tManSelTimer.Q ;
IF __EDTB42 THEN
IMODESTATE := (  0) ;
END_IF ;
__MO_1GAIN_5 := __EDTB42 ;
__EDTB43 := __EDTB42 ;
__EDTB44 := (__EDTB41 OR __EDTB43) ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,41
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: TON *)
tonConfigSelector(I_XMANCMD, T#10S) ;
__EDTB45 := tonConfigSelector.Q ;
__EDTB46 := XCONFIGMODE ;
XCONFIGMODE := (__EDTB45 OR __EDTB46) AND NOT(XDISABLECONFIG) ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,45
__ENDSTEPPRAGMA
(*Label :*)(**)
(* FB call: TON *)
tonDisableConfig(XCONFIGMODE AND NOT(I_XMANCMD), T#5S) ;
__EDTB47 := tonDisableConfig.Q ;
XDISABLECONFIG := __EDTB47 ;
__EDTB49 := __EDTB47 ;
IF __EDTB49 THEN
(* Operator output on : >= with __EDTB48 *)
__EDTB48 := (IPULSECOUNTER >= 5) ;
ELSE
__EDTB48 := FALSE ;
END_IF ;
__MO_GREATEQUAL_1 := __EDTB48 ;
O_XRISCCMD := __EDTB48 ;
__EDTB50 := __EDTB48 ;
IF __EDTB50 THEN
IPULSECOUNTER := (  0) ;
END_IF ;
__MO_1GAIN_6 := __EDTB50 ;
__EDTB51 := __EDTB50 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,50
__ENDSTEPPRAGMA
(*Label :*)(**)
; (*Pulse detection on : I_XMANCMD with __MEMO__8__I_XMANCMD *)
__EDTB52 := XCONFIGMODE AND (I_XMANCMD AND NOT(__MEMO__8__I_XMANCMD)) ;
IF __EDTB52 THEN
IPULSECOUNTER := (IPULSECOUNTER + 1) ;
END_IF ;
__MO_PLUS_1 := __EDTB52 ;

(*************** Code for the end of Rung **************)
__MEMO__8__I_XMANCMD := I_XMANCMD ; (*Pulse detection on : I_XMANCMD with __MEMO__8__I_XMANCMD *)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,54
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB53 := STHMIPLCMD.XHMIOK ;
IF __EDTB53 THEN
IMODESTATE := (  STHMIPLCMD.IMODESEL) ;
END_IF ;
__MO_1GAIN_7 := __EDTB53 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,57
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB54 := XLAMPCMD ;
__EDTB55 := XCONFIGMODE ;
__EDTB56 := (__EDTB54 OR __EDTB55) ;
O_XLAMPCMD := __EDTB56 ;
STHMIPLFDBK.XLAMPSTATE := __EDTB56 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,60
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB57 := TRUE ;
IF __EDTB57 THEN
STHMIPLFDBK.IMODE := (  IMODESTATE) ;
END_IF ;
__MO_1GAIN_8 := __EDTB57 ;

(*************** Code for the end of Rung **************)


(*************** Code for the end of File **************)
__GL __LG0000 ;



(*************** Local Symbols table *******************)
(* __EDTB1 *)
(* __EDTB2 *)
(* __EDTB3 *)
(* __EDTB4 *)
(* __EDTB5 *)
(* __EDTB6 *)
(* __EDTB7 *)
(* __EDTB8 *)
(* __EDTB9 *)
(* __EDTB10 *)
(* __EDTB11 *)
(* __EDTB12 *)
(* __EDTB13 *)
(* __EDTB14 *)
(* __EDTB15 *)
(* __MEMO__1__I_XMANCMD *)
(* __EDTB16 *)
(* __MEMO__2__STHMIPLCMD_XMANCMD *)
(* __EDTB17 *)
(* __MEMO__3__STHMIPLCMD_XMANCMD *)
(* __EDTB18 *)
(* __EDTB19 *)
(* __EDTB20 *)
(* __EDTB21 *)
(* __EDTB22 *)
(* __EDTB23 *)
(* __MEMO__4__I_XMANCMD *)
(* __EDTB24 *)
(* __MEMO__5__STHMIPLCMD_XMANCMD *)
(* __EDTB25 *)
(* __MEMO__6__STHMIPLCMD_XMANCMD *)
(* __EDTB26 *)
(* __EDTB27 *)
(* __EDTB28 *)
(* __EDTB29 *)
(* __EDTB30 *)
(* __EDTB31 *)
(* __EDTB32 *)
(* __EDTB33 *)
(* __MEMO__7__I_XAUTCMD *)
(* __EDTB34 *)
(* __EDTB35 *)
(* __EDTB36 *)
(* __EDTB37 *)
(* __EDTB38 *)
(* __EDTB39 *)
(* __EDTB40 *)
(* __EDTB41 *)
(* __EDTB42 *)
(* __EDTB43 *)
(* __EDTB44 *)
(* __EDTB45 *)
(* __EDTB46 *)
(* __EDTB47 *)
(* __EDTB48 *)
(* __EDTB49 *)
(* __EDTB50 *)
(* __EDTB51 *)
(* __MEMO__8__I_XMANCMD *)
(* __EDTB52 *)
(* __EDTB53 *)
(* __EDTB54 *)
(* __EDTB55 *)
(* __EDTB56 *)
(* __EDTB57 *)

