(****** QuickLD compiler *******************************)
(****** Copyright Rockwell Automation Canada, Ltd ******)
(****** ST *********************************************)

(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,1
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB2 := TRUE ;
IF __EDTB2 THEN
(* Operator output on : = with __EDTB1 *)
__EDTB1 := (O_STHMIZONAARISC.IMODE = 0) ;
ELSE
__EDTB1 := FALSE ;
END_IF ;
__MO_EQUAL_1 := __EDTB1 ;
; (*Pulse detection on : MBIN_XZ1RISCAUTO with __MEMO__1__MBIN_XZ1RISCAUTO *)
__EDTB3 := __EDTB1 AND (MBIN_XZ1RISCAUTO AND NOT(__MEMO__1__MBIN_XZ1RISCAUTO)) ;
IF __EDTB3 THEN
I_STZONAAMANCMD.IMODE := (  1) ;
END_IF ;
__MO_1GAIN_1 := __EDTB3 ;

(*************** Code for the end of Rung **************)
__MEMO__1__MBIN_XZ1RISCAUTO := MBIN_XZ1RISCAUTO ; (*Pulse detection on : MBIN_XZ1RISCAUTO with __MEMO__1__MBIN_XZ1RISCAUTO *)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,5
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB5 := TRUE ;
IF __EDTB5 THEN
(* Operator output on : = with __EDTB4 *)
__EDTB4 := (O_STHMIZONAARISC.IMODE = 1) ;
ELSE
__EDTB4 := FALSE ;
END_IF ;
__MO_EQUAL_2 := __EDTB4 ;
; (*Pulse detection on : MBIN_XZ1RISCAUTO with __MEMO__2__MBIN_XZ1RISCAUTO *)
__EDTB6 := __EDTB4 AND (MBIN_XZ1RISCAUTO AND NOT(__MEMO__2__MBIN_XZ1RISCAUTO)) ;
IF __EDTB6 THEN
I_STZONAAMANCMD.IMODE := (  0) ;
END_IF ;
__MO_1GAIN_2 := __EDTB6 ;

(*************** Code for the end of Rung **************)
__MEMO__2__MBIN_XZ1RISCAUTO := MBIN_XZ1RISCAUTO ; (*Pulse detection on : MBIN_XZ1RISCAUTO with __MEMO__2__MBIN_XZ1RISCAUTO *)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,9
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB8 := TRUE ;
IF __EDTB8 THEN
(* Operator output on : = with __EDTB7 *)
__EDTB7 := (O_STHMIZONABRISC.IMODE = 0) ;
ELSE
__EDTB7 := FALSE ;
END_IF ;
__MO_EQUAL_3 := __EDTB7 ;
; (*Pulse detection on : MBIN_XZ2RISCAUTO with __MEMO__3__MBIN_XZ2RISCAUTO *)
__EDTB9 := __EDTB7 AND (MBIN_XZ2RISCAUTO AND NOT(__MEMO__3__MBIN_XZ2RISCAUTO)) ;
IF __EDTB9 THEN
I_STZONABMANCMD.IMODE := (  1) ;
END_IF ;
__MO_1GAIN_3 := __EDTB9 ;

(*************** Code for the end of Rung **************)
__MEMO__3__MBIN_XZ2RISCAUTO := MBIN_XZ2RISCAUTO ; (*Pulse detection on : MBIN_XZ2RISCAUTO with __MEMO__3__MBIN_XZ2RISCAUTO *)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,13
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB11 := TRUE ;
IF __EDTB11 THEN
(* Operator output on : = with __EDTB10 *)
__EDTB10 := (O_STHMIZONABRISC.IMODE = 1) ;
ELSE
__EDTB10 := FALSE ;
END_IF ;
__MO_EQUAL_4 := __EDTB10 ;
; (*Pulse detection on : MBIN_XZ2RISCAUTO with __MEMO__4__MBIN_XZ2RISCAUTO *)
__EDTB12 := __EDTB10 AND (MBIN_XZ2RISCAUTO AND NOT(__MEMO__4__MBIN_XZ2RISCAUTO)) ;
IF __EDTB12 THEN
I_STZONABMANCMD.IMODE := (  0) ;
END_IF ;
__MO_1GAIN_4 := __EDTB12 ;

(*************** Code for the end of Rung **************)
__MEMO__4__MBIN_XZ2RISCAUTO := MBIN_XZ2RISCAUTO ; (*Pulse detection on : MBIN_XZ2RISCAUTO with __MEMO__4__MBIN_XZ2RISCAUTO *)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,17
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB14 := TRUE ;
IF __EDTB14 THEN
(* Operator output on : = with __EDTB13 *)
__EDTB13 := (O_STHMIZONACRISC.IMODE = 0) ;
ELSE
__EDTB13 := FALSE ;
END_IF ;
__MO_EQUAL_5 := __EDTB13 ;
; (*Pulse detection on : MBIN_XZ3RISCAUTO with __MEMO__5__MBIN_XZ3RISCAUTO *)
__EDTB15 := __EDTB13 AND (MBIN_XZ3RISCAUTO AND NOT(__MEMO__5__MBIN_XZ3RISCAUTO)) ;
IF __EDTB15 THEN
I_STZONACMANCMD.IMODE := (  1) ;
END_IF ;
__MO_1GAIN_5 := __EDTB15 ;

(*************** Code for the end of Rung **************)
__MEMO__5__MBIN_XZ3RISCAUTO := MBIN_XZ3RISCAUTO ; (*Pulse detection on : MBIN_XZ3RISCAUTO with __MEMO__5__MBIN_XZ3RISCAUTO *)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,21
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB17 := TRUE ;
IF __EDTB17 THEN
(* Operator output on : = with __EDTB16 *)
__EDTB16 := (O_STHMIZONACRISC.IMODE = 1) ;
ELSE
__EDTB16 := FALSE ;
END_IF ;
__MO_EQUAL_6 := __EDTB16 ;
; (*Pulse detection on : MBIN_XZ3RISCAUTO with __MEMO__6__MBIN_XZ3RISCAUTO *)
__EDTB18 := __EDTB16 AND (MBIN_XZ3RISCAUTO AND NOT(__MEMO__6__MBIN_XZ3RISCAUTO)) ;
IF __EDTB18 THEN
I_STZONACMANCMD.IMODE := (  0) ;
END_IF ;
__MO_1GAIN_6 := __EDTB18 ;

(*************** Code for the end of Rung **************)
__MEMO__6__MBIN_XZ3RISCAUTO := MBIN_XZ3RISCAUTO ; (*Pulse detection on : MBIN_XZ3RISCAUTO with __MEMO__6__MBIN_XZ3RISCAUTO *)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,25
__ENDSTEPPRAGMA
(*Label :*)(**)
FCLETTURACMDMODBUSRISCALDAMENTO := TRUE ;

(*************** Code for the end of Rung **************)


(*************** Code for the end of File **************)
__GL __LG0000 ;



(*************** Local Symbols table *******************)
(* __EDTB1 *)
(* __EDTB2 *)
(* __MEMO__1__MBIN_XZ1RISCAUTO *)
(* __EDTB3 *)
(* __EDTB4 *)
(* __EDTB5 *)
(* __MEMO__2__MBIN_XZ1RISCAUTO *)
(* __EDTB6 *)
(* __EDTB7 *)
(* __EDTB8 *)
(* __MEMO__3__MBIN_XZ2RISCAUTO *)
(* __EDTB9 *)
(* __EDTB10 *)
(* __EDTB11 *)
(* __MEMO__4__MBIN_XZ2RISCAUTO *)
(* __EDTB12 *)
(* __EDTB13 *)
(* __EDTB14 *)
(* __MEMO__5__MBIN_XZ3RISCAUTO *)
(* __EDTB15 *)
(* __EDTB16 *)
(* __EDTB17 *)
(* __MEMO__6__MBIN_XZ3RISCAUTO *)
(* __EDTB18 *)

