(****** QuickLD compiler *******************************)
(****** Copyright Rockwell Automation Canada, Ltd ******)
(****** ST *********************************************)

(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,1
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB2 := TRUE ;
IF __EDTB2 THEN
(* Operator output on : = with __EDTB1 *)
__EDTB1 := (I_STHMICMD.IMODE = 0) ;
ELSE
__EDTB1 := FALSE ;
END_IF ;
__MO_EQUAL_1 := __EDTB1 ;
XMAN := __EDTB1 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,5
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB4 := TRUE ;
IF __EDTB4 THEN
(* Operator output on : = with __EDTB3 *)
__EDTB3 := (I_STHMICMD.IMODE = 1) ;
ELSE
__EDTB3 := FALSE ;
END_IF ;
__MO_EQUAL_2 := __EDTB3 ;
XAUTO := __EDTB3 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,9
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB6 := TRUE ;
IF __EDTB6 THEN
(* Operator output on : = with __EDTB5 *)
__EDTB5 := (I_STHMICMD.IMODE = 2) ;
ELSE
__EDTB5 := FALSE ;
END_IF ;
__MO_EQUAL_3 := __EDTB5 ;
XDISABLE := __EDTB5 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,13
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB7 := TRUE ;
IF __EDTB7 THEN
TMANTIMEOUT := ANY_TO_TIME(I_STHMICMD.IMANTIME) ;
END_IF ;
__MO_ANY_TO_TIME_1 := __EDTB7 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,16
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB8 := XMAN AND XMANCMD ;
__EDTB9 := __EDTB8 AND I_XEVSTATE ;
__EDTB10 := __EDTB8 AND NOT(I_XEVSTATE) ;
(* FB call: TON *)
tonManTime((__EDTB9 OR __EDTB10), TMANTIMEOUT) ;
XMANTIMEOUT := tonManTime.Q ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,19
__ENDSTEPPRAGMA
(*Label :*)(**)
; (*Pulse detection on : I_STHMICMD.XMANCMD with __MEMO__1__I_STHMICMD_XMANCMD *)
__EDTB11 := (I_STHMICMD.XMANCMD AND NOT(__MEMO__1__I_STHMICMD_XMANCMD)) ;
__EDTB12 := XMANCMD ;
XMANCMD := (__EDTB11 OR __EDTB12) AND XMAN AND NOT(XMANTIMEOUT) AND NOT(XDISABLE) ;

(*************** Code for the end of Rung **************)
__MEMO__1__I_STHMICMD_XMANCMD := I_STHMICMD.XMANCMD ; (*Pulse detection on : I_STHMICMD.XMANCMD with __MEMO__1__I_STHMICMD_XMANCMD *)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,22
__ENDSTEPPRAGMA
(*Label :*)(**)
XAUTOCMD := XAUTO AND NOT(XDISABLE) AND I_STHMICMD.AXAUTOSET[I_DIGIORNO,I_DIORA] ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,24
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB13 := XMANCMD ;
__EDTB14 := XAUTOCMD ;
O_XEVCMD := (__EDTB13 OR __EDTB14) ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,27
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB15 := XMAN ;
IF __EDTB15 THEN
O_STHMIFDBK.IMODE := (  0) ;
END_IF ;
__MO_1GAIN_1 := __EDTB15 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,30
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB16 := XAUTO ;
IF __EDTB16 THEN
O_STHMIFDBK.IMODE := (  1) ;
END_IF ;
__MO_1GAIN_2 := __EDTB16 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,33
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB17 := XDISABLE ;
IF __EDTB17 THEN
O_STHMIFDBK.IMODE := (  2) ;
END_IF ;
__MO_1GAIN_3 := __EDTB17 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,36
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB18 := NOT(O_XEVCMD) ;
__EDTB19 := __EDTB18 AND NOT(I_XEVSTATE) ;
IF __EDTB19 THEN
O_STHMIFDBK.ISTATE := (  0) ;
END_IF ;
__MO_1GAIN_4 := __EDTB19 ;
__EDTB20 := __EDTB19 ;
__EDTB21 := __EDTB18 AND I_XEVSTATE ;
IF __EDTB21 THEN
O_STHMIFDBK.ISTATE := (  1) ;
END_IF ;
__MO_1GAIN_5 := __EDTB21 ;
__EDTB22 := __EDTB21 ;

(*************** Code for the end of Rung **************)


(*************** Rung **********************************)
(**)
__STEPPRAGMA
0,41
__ENDSTEPPRAGMA
(*Label :*)(**)
__EDTB23 := O_XEVCMD ;
__EDTB24 := __EDTB23 AND NOT(I_XEVSTATE) ;
IF __EDTB24 THEN
O_STHMIFDBK.ISTATE := (  2) ;
END_IF ;
__MO_1GAIN_6 := __EDTB24 ;
__EDTB25 := __EDTB24 ;
__EDTB26 := __EDTB23 AND I_XEVSTATE ;
IF __EDTB26 THEN
O_STHMIFDBK.ISTATE := (  3) ;
END_IF ;
__MO_1GAIN_7 := __EDTB26 ;
__EDTB27 := __EDTB26 ;

(*************** Code for the end of Rung **************)


(*************** Code for the end of File **************)
__GL __LG0000 ;



(*************** Local Symbols table *******************)
(* __EDTB1 *)
(* __EDTB2 *)
(* __EDTB3 *)
(* __EDTB4 *)
(* __EDTB5 *)
(* __EDTB6 *)
(* __EDTB7 *)
(* __EDTB8 *)
(* __EDTB9 *)
(* __EDTB10 *)
(* __MEMO__1__I_STHMICMD_XMANCMD *)
(* __EDTB11 *)
(* __EDTB12 *)
(* __EDTB13 *)
(* __EDTB14 *)
(* __EDTB15 *)
(* __EDTB16 *)
(* __EDTB17 *)
(* __EDTB18 *)
(* __EDTB19 *)
(* __EDTB20 *)
(* __EDTB21 *)
(* __EDTB22 *)
(* __EDTB23 *)
(* __EDTB24 *)
(* __EDTB25 *)
(* __EDTB26 *)
(* __EDTB27 *)

